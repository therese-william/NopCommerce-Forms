@model Nop.Plugin.Dreamy.Forms.Models.SubmissionModel
@using Nop.Web.Framework
@{
    //page title
    ViewBag.Title = T("Plugins.Dreamy.SubmissionDetails").Text;
    Layout = "_AdminLayout.cshtml";
}
@using (Html.BeginForm("SubmissionUpdate", "Forms", null, FormMethod.Post, new { onsubmit = "return kendovalidate()" }))
{
    @Html.AntiForgeryToken()
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-catalog.png")" alt="" />
            @T("Plugins.Dreamy.SubmissionDetails.Edit") - @Model.FormName @Html.ActionLink("(" + T("Plugins.Dreamy.Submissions.BackToList") + ")", "Submissions")
        </div>
        <div class="options">
            <input type="submit" name="save" class="k-button" value="@T("Admin.Common.Save")" />
            <input type="submit" name="save-print" class="k-button" value="@T("Admin.Common.SavePrint")" />
        </div>
    </div>
    <input type="hidden" id="formid" name="formid" value="@Model.FormId" />
    <input type="hidden" id="submissionid" name="submissionid" value="@Model.SubmissionId" />
    @*@Html.Partial("_CreateOrUpdate", Model)*@
    if (Model.SubmissionFields != null && Model.SubmissionFields.Count > 0) {
        <table class="adminContent">
            @foreach (var field in Model.SubmissionFields){
            <tr>
                @if (field.FieldType == "Display Text" || field.FieldType == "Display Title")
                {
                    <td class="adminTitle" colspan="2" style="white-space:normal;">
                        @field.FieldName
                    </td>
                }
                else
                {
                    <td class="adminTitle">
                        <input type="hidden" id='valueid_@field.Id' name="valueid_@field.Id" value="@field.FieldValueId" />
                        @field.FieldName :
                    </td>
                    <td class="adminData">
                        @if (!field.IsForAdminOnly) 
                        { 
                            <span>@field.FieldValue</span>
                        }
                        else
                        {
                            var htmlattributes = new Dictionary<string, object> { { "id", "field" + field.Id }, { "placeholder", field.FieldName } };
                            switch (field.FieldType)
                            {
                                case "Text":                                
                                    if (field.IsRequired)
                                    {
                                        htmlattributes.Add("data-val", "true");
                                        htmlattributes.Add("data-val-required", "Please enter " + field.FieldName);
                                    }
                                
                                    @Html.TextBox("field" + field.Id, field.FieldValue, htmlattributes)
                                    if (field.IsRequired)
                                    {
                                        @Html.ValidationMessage("field" + field.Id)
                                    }
                                    break;
                                case "Email":
                                    htmlattributes.Add("type", "email");
                                    htmlattributes.Add("data-val-email", "Wrong email");
                                    if (field.IsRequired)
                                    {
                                        htmlattributes.Add("data-val", "true");
                                        htmlattributes.Add("data-val-required", "Please enter " + field.FieldName);
                                    }

                                    @Html.TextBox("field" + field.Id, field.FieldValue, htmlattributes)
                                    @Html.ValidationMessage("field" + field.Id)
                                    break;
                                case "Date":
                                    htmlattributes.Add("type", "date");
                                    if (field.IsRequired)
                                    {
                                        htmlattributes.Add("data-val", "true");
                                        htmlattributes.Add("data-val-required", "Please enter " + field.FieldName);
                                    }

                                    @Html.TextBox("field" + field.Id, field.FieldValue, htmlattributes)
                                    if (field.IsRequired)
                                    {
                                        @Html.ValidationMessage("field" + field.Id)
                                    }
                                    break;
                                case "Number":
                                    htmlattributes.Add("type", "number");
                                    if (field.IsRequired)
                                    {
                                        htmlattributes.Add("data-val", "true");
                                        htmlattributes.Add("data-val-required", "Please enter " + field.FieldName);
                                    }

                                    @Html.TextBox("field" + field.Id, field.FieldValue, htmlattributes)
                                    if (field.IsRequired)
                                    {
                                        @Html.ValidationMessage("field" + field.Id)
                                    }
                                    break;
                                case "List":
                                    if (field.IsRequired)
                                    {
                                        htmlattributes.Add("data-val", "true");
                                        htmlattributes.Add("data-val-required", "Please enter " + field.FieldName);
                                    }
                                    List<SelectListItem> listitems = new List<SelectListItem>();
                                    var listvalues = field.FieldAllowedValues.Split(',');

                                    foreach (var listvalue in listvalues)
                                    {
                                        SelectListItem i = new SelectListItem();
                                        i.Text = listvalue;
                                        i.Value = listvalue;
                                        if (field.FieldValue == listvalue)
                                        {
                                            i.Selected = true;
                                        }
                                        listitems.Add(i);
                                    }
                                    @Html.DropDownList("field" + field.Id, listitems, "Select " + field.FieldName + " ..." , htmlattributes)
                                    if (field.IsRequired)
                                    {
                                        @Html.ValidationMessage("field" + field.Id)
                                    }
                                    break;
                                case "Multi line text":
                                    if (field.IsRequired)
                                    {
                                        htmlattributes.Add("data-val", "true");
                                        htmlattributes.Add("data-val-required", "Please enter " + field.FieldName);
                                    }

                                    @Html.TextArea("field" + field.Id, field.FieldValue, htmlattributes)
                                    if (field.IsRequired)
                                    {
                                        @Html.ValidationMessage("field" + field.Id)
                                    }
                                    break;
                            }
                        }
                        @*@Html.EditorFor(model => model.FormName)
                        @Html.ValidationMessageFor(model => model.FormName)*@
                    </td>
                }
            </tr>
            }
        </table>
    }
}