@model Nop.Plugin.Dreamy.Forms.Models.FormModel
@using Nop.Web.Framework
@using Nop.Web.Framework.Events
@using Nop.Services.Events
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)


<script>
    $(document).ready(function () {
        $("#manufacturer-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div id="manufacturer-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Plugins.Dreamy.Forms.Info")
        </li>
        @*<li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Common.SEO")
        </li>*@
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Plugins.Dreamy.Forms.Fields")
        </li>
        @*<li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
            @T("Admin.Catalog.Manufacturers.Acl")
        </li>
        <li @Html.RenderSelectedTabIndex(5, GetSelectedTabIndex())>
            @T("Admin.Catalog.Manufacturers.Stores")
        </li>*@
    </ul>
    <div>
        @TabInfo()
    </div>
    @*<div>
        @TabSeo()
    </div>*@
    <div>
        @TabFields()
    </div>
    @*<div>
        @TabAcl()
    </div>
    <div>
        @TabStores()
    </div>*@
</div>
<script>
    $(document).ready(function() {
        $("#form-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "form-edit");
    Nop.Core.Infrastructure.EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <script type="text/javascript">
        @*$(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
            togglePageSize();
        });

        function togglePageSize() {
            if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
                $('#pnlPageSize').hide();
                $('#pnlPageSizeOptions').show();
            } else {
                $('#pnlPageSize').show();
                $('#pnlPageSizeOptions').hide();
            }
        }*@
    </script>

    @*@(Html.LocalizedEditor<Nop.Plugin.Dreamy.Forms.Domain.FormsRecord, ManufacturerLocalizedModel>("manufacturer-info-localized",
    @<table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].Name):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].Name)
                @Html.ValidationMessageFor(model => model.Locales[item].Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].Description):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].Description, "RichEditor")
                @Html.ValidationMessageFor(model => model.Locales[item].Description)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </td>
        </tr>
    </table>
                ,
                @<table class="adminContent">
                    <tr>
                        <td class="adminTitle">
                            @Html.NopLabelFor(model => model.Name):
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(model => model.Name)
                            @Html.ValidationMessageFor(model => model.Name)
                        </td>
                    </tr>
                    <tr>
                        <td class="adminTitle">
                            @Html.NopLabelFor(model => model.Description):
                        </td>
                        <td class="adminData">
                            @Html.EditorFor(x => x.Description, "RichEditor")
                            @Html.ValidationMessageFor(model => model.Description)
                        </td>
                    </tr>
                </table>
                                            ))*@
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.FormName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.FormName)
                @Html.ValidationMessageFor(model => model.FormName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AdminEmails):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AdminEmails)
                @Html.ValidationMessageFor(model => model.AdminEmails)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Published):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.Published)
                @Html.ValidationMessageFor(model => model.Published)
            </td>
        </tr>
    </table>
}
@*@helper TabSeo()
{
    @(Html.LocalizedEditor<ManufacturerModel, ManufacturerLocalizedModel>("manufacturer-seo-localized",
    @<table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].MetaKeywords):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].MetaKeywords)
                @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].MetaDescription):
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.Locales[item].MetaDescription)
                @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].MetaTitle):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].MetaTitle)
                @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Locales[item].SeName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].SeName)
                @Html.ValidationMessageFor(model => model.Locales[item].SeName)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </td>
        </tr>
    </table>
               ,
            @<table class="adminContent">
                <tr>
                    <td class="adminTitle">
                        @Html.NopLabelFor(model => model.MetaKeywords):
                    </td>
                    <td class="adminData">
                        @Html.EditorFor(x => x.MetaKeywords)
                        @Html.ValidationMessageFor(model => model.MetaKeywords)
                    </td>
                </tr>
                <tr>
                    <td class="adminTitle">
                        @Html.NopLabelFor(model => model.MetaDescription):
                    </td>
                    <td class="adminData">
                        @Html.TextAreaFor(x => x.MetaDescription)
                        @Html.ValidationMessageFor(model => model.MetaDescription)
                    </td>
                </tr>
                <tr>
                    <td class="adminTitle">
                        @Html.NopLabelFor(model => model.MetaTitle):
                    </td>
                    <td class="adminData">
                        @Html.EditorFor(x => x.MetaTitle)
                        @Html.ValidationMessageFor(model => model.MetaTitle)
                    </td>
                </tr>
                <tr>
                    <td class="adminTitle">
                        @Html.NopLabelFor(model => model.SeName):
                    </td>
                    <td class="adminData">
                        @Html.EditorFor(x => x.SeName)
                        @Html.ValidationMessageFor(model => model.SeName)
                    </td>
                </tr>
            </table>))
}*@
@helper TabFields()
{
    if (Model.Id > 0)
    {
        var defaultGridPageSize = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
        var gridPageSizes = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

        <table class="adminContent">
            <tr>
                <td>
                    <div id="fields-grid"></div>
                    <script>
    $(document).ready(function () {
        $("#fields-grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("FieldList", "Forms", new { formId = Model.Id }))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    create: {
                        url:"@Html.Raw(Url.Action("FieldInsert", "Forms", new { fieldformId = Model.Id }))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    update: {
                        url:"@Html.Raw(Url.Action("FieldUpdate", "Forms"))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    destroy: {
                        url: "@Html.Raw(Url.Action("FieldDelete", "Forms"))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            FieldName: {editable: true, type: "string" },
                            FieldType: {editable: true, type: "string" },
                            FieldAllowedValues: {editable: true, type: "string" },
                            IsRequired: {editable: true, type: "boolean" },
                            IsForAdminOnly: {editable: true, type: "boolean" },
                            DisplayOrder: {editable: true, type: "number" },
                            FormId: {editable: false, type: "number" }
                        }
                    }
                },
                requestEnd: function(e) {
                    if(e.type=="update" || e.type=="create" || e.type=="destroy") {
                        this.read();
                    }
                },
                error: function(e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },
                pageSize: @(defaultGridPageSize),
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
            pageable: {
                refresh: true,
                pageSizes: [@(gridPageSizes)]
            },
            toolbar: ["create"],
            edit: function(e) {
                if (e.model.isNew()) {
                    //little hack here
                    //pre-select the first value of kendoui dropdownlist datasource
                    //for some reasons (maybe, bug) it always sends 0
                    //if no value has been selected (changed) in the dropdownlist
                    if (allFieldTypes.length > 0) {
                        e.model.FieldType = allFieldTypes[0].Name;
                    }
                }
            },
            editable: {
                confirmation: false,
                mode: "inline"
            },
            scrollable: false,
            columns: [{
                field: "FieldName",
                type: "string",
                title: "@T("Plugins.Dreamy.FormFields.Fields.FieldName")"
            },{
                field: "FieldType",
                title: "@T("Plugins.Dreamy.FormFields.Fields.FieldType")",
                width: 200,
                editor: fieldTypeDropDownEditor,
                template: "#:FieldType#"
            }, {
                field: "FieldAllowedValues",
                type: "string",
                title: "@T("Plugins.Dreamy.FormFields.Fields.FieldAllowedValues")"
            }, {
                field: "IsRequired",
                title: "@T("Plugins.Dreamy.FormFields.Fields.IsRequired")",
                width: 150,
                headerAttributes: { style: "text-align:center" },
                attributes: { style: "text-align:center" },
                template: '<img src="@Url.Content("~/Administration/Content/images/")active-#=IsRequired#.gif" />'
            },{
                field: "IsForAdminOnly",
                title: "@T("Plugins.Dreamy.FormFields.Fields.IsForAdminOnly")",
                width: 150,
                headerAttributes: { style: "text-align:center" },
                attributes: { style: "text-align:center" },
                template: '<img src="@Url.Content("~/Administration/Content/images/")active-#=IsForAdminOnly#.gif" />'
            }, {
                field: "DisplayOrder",
                title: "@T("Plugins.Dreamy.FormFields.Fields.DisplayOrder")",
                //integer format
                format: "{0:0}",
                width: 150
            },{
                command: [{
                    name: "edit",
                    text: "@T("Admin.Common.Edit")"
                }, {
                    name: "destroy",
                    text: "@T("Admin.Common.Delete")"
                }],
                width: 200
            }]
    });
    });


    //local datasource
    var allFieldTypes = [
        {Id: 'Display Text', Name: 'Display Text'},
        {Id: 'Display Title', Name: 'Display Title'},
        {Id: 'Text', Name: 'Text'},
        {Id: 'Email', Name: 'Email'},
        {Id: 'Multi line text', Name: 'Multi line text'},
        {Id: 'Number', Name: 'Number'},
        {Id: 'Date', Name: 'Date'},
        {Id: 'List', Name: 'List'}
    ];

    function fieldTypeDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:FieldType"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allFieldTypes
            });
    }
                    </script>
                </td>
            </tr>
            <tr>
                <td width="100%">
                    @*<input type="submit" id="btnAddNewField" value="@T("Plugins.Dreamy.Forms.Fields.AddNew")" onclick="javascript:OpenWindow('@(Url.Action("FieldAddPopup", "Forms", new { formId = Model.Id, btnId = "btnRefreshFields", formId = "form-form" }))', 800, 800, true); return false;" class="k-button" />*@
                    <input type="submit" id="btnRefreshFields" style="display: none" />
                    <script type="text/javascript">
                            $(document).ready(function () {
                                $('#btnRefreshFields').click(function () {
                                    //refresh grid
                                    var grid = $("#fields-grid").data('kendoGrid');
                                    grid.dataSource.read();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                    </script>
                </td>
            </tr>
        </table>
    }
    else
    {
        @T("Plugins.Dreamy.Forms.SaveBeforeEdit")
    }
}
@*@helper TabAcl()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.SubjectToAcl)").click(toggleAcl);

            toggleAcl();
        });


        function toggleAcl() {
            if ($('#@Html.FieldIdFor(model => model.SubjectToAcl)').is(':checked')) {
                $('#pnl-acl').show();
            }
            else {
                $('#pnl-acl').hide();
            }
        }

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SubjectToAcl):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SubjectToAcl)
                @Html.ValidationMessageFor(model => model.SubjectToAcl)
            </td>
        </tr>
        <tr id="pnl-acl">
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AvailableCustomerRoles):
            </td>
            <td class="adminData">
                @if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
                {
                    @Html.Action("AclDisabledWarning", "Common")
                    foreach (var customerRole in Model.AvailableCustomerRoles)
                    {
                        <div>
                            <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />@customerRole.Name
                        </div>
                    }
                }
                else
                {
                    <div>No customer roles defined</div>
                }
            </td>
        </tr>
    </table>
}

@helper TabStores()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);

            toggleStoreMapping();
        });


        function toggleStoreMapping() {
            if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                $('#pnl-available-stores').show();
            }
            else {
                $('#pnl-available-stores').hide();
            }
        }

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.LimitedToStores):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LimitedToStores)
                @Html.ValidationMessageFor(model => model.LimitedToStores)
            </td>
        </tr>
        <tr id="pnl-available-stores">
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AvailableStores):
            </td>
            <td class="adminData">
                @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                {
                    @Html.Action("MultistoreDisabledWarning", "Common")
                    foreach (var store in Model.AvailableStores)
                    {
                        <div>
                            <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />@store.Name
                        </div>
                    }
                }
                else
                {
                    <div>No stores defined</div>
                }
            </td>
        </tr>
    </table>
}*@