/*!
 * FooTable - Awesome Responsive Tables
 * Version : 2.0.1.2
 * http://fooplugins.com/plugins/footable-jquery/
 *
 * Requires jQuery - http://jquery.com/
 *
 * Copyright 2013 Steven Usher & Brad Vincent
 * Released under the MIT license
 * You are free to use FooTable in commercial projects as long as this copyright header is left intact.
 *
 * Date: 21 Sep 2013
 */

$(document).ready(function () { if (!(1 > $(".order-summary-content .cart, .wishlist-content .cart, .return-request-page .data-table").length || 1 > $("input.update-cart-button, input.update-wishlist-button, input.submit-return-request-button").length)) $("input.update-cart-button, input.update-wishlist-button, input.submit-return-request-button").one("click", function () { $(".order-summary-content .cart, .wishlist-content .cart, .return-request-page .data-table").find("tr").not(".footable-row-detail").find("input, select").each(function () { var d = $(this), f = $(".order-summary-content .cart, .wishlist-content .cart, .return-request-page .data-table").find("input, select").filter('[name="' + d.attr("name") + '"]').not(d); "checkbox" == d.attr("type") && (f = f.filter('[value="' + d.attr("value") + '"]')); 0 < f.length && ("checkbox" == d.attr("type") ? d.attr("checked", f.first().attr("checked")) : d.attr("value", f.first().val()), f.remove()) }) }) }); (function (d, f, v) { function r() { var b = this; b.id = null; b.busy = !1; b.start = function (d, m) { b.busy || (b.stop(), b.id = setTimeout(function () { d(); b.id = null; b.busy = !1 }, m), b.busy = !0) }; b.stop = function () { null !== b.id && (clearTimeout(b.id), b.id = null, b.busy = !1) } } function u(b, h, m) { var a = this; a.id = m; a.table = b; a.options = h; a.breakpoints = []; a.breakpointNames = ""; a.columns = {}; a.plugins = f.footable.plugins.load(a); var k = a.options, e = k.classes, p = k.events, l = k.triggers, q = 0; a.timers = { resize: new r, register: function (c) { a.timers[c] = new r; return a.timers[c] } }; a.init = function () { var c = d(f), g = d(a.table); f.footable.plugins.init(a); if (g.hasClass(e.loaded)) a.raise(p.alreadyInitialized); else { a.raise(p.initializing); g.addClass(e.loading); g.find(k.columnDataSelector).each(function () { var c = a.getColumnData(this); a.columns[c.index] = c }); for (var b in k.breakpoints) a.breakpoints.push({ name: b, width: k.breakpoints[b] }), a.breakpointNames += b + " "; a.breakpoints.sort(function (a, c) { return a.width - c.width }); g.unbind(l.initialize).bind(l.initialize, function () { g.removeData("footable_info"); g.data("breakpoint", ""); g.trigger(l.resize); g.removeClass(e.loading); g.addClass(e.loaded).addClass(e.main); a.raise(p.initialized) }).unbind(l.redraw).bind(l.redraw, function () { a.redraw() }).unbind(l.resize).bind(l.resize, function () { a.resize() }).unbind(l.expandFirstRow).bind(l.expandFirstRow, function () { g.find(k.toggleSelector).first().not("." + e.detailShow).trigger(l.toggleRow) }).unbind(l.expandAll).bind(l.expandAll, function () { g.find(k.toggleSelector).not("." + e.detailShow).trigger(l.toggleRow) }).unbind(l.collapseAll).bind(l.collapseAll, function () { g.find("." + e.detailShow).trigger(l.toggleRow) }); g.trigger(l.initialize); c.bind("resize.footable", function () { a.timers.resize.stop(); a.timers.resize.start(function () { a.raise(l.resize) }, k.delay) }) } }; a.addRowToggle = function () { if (k.addRowToggle) { var c = d(a.table); c.find("span." + e.toggle).remove(); for (var g in a.columns) { var b = a.columns[g]; if (b.toggle) { g = "> tbody > tr:not(." + e.detail + ",." + e.disabled + ") > td:nth-child(" + (parseInt(b.index, 10) + 1) + ")"; c.find(g).not("." + e.detailCell).prepend(d(k.toggleHTMLElement).addClass(e.toggle)); return } } c.find("> tbody > tr:not(." + e.detail + ",." + e.disabled + ") > td:first-child").not("." + e.detailCell).prepend(d(k.toggleHTMLElement).addClass(e.toggle)) } }; a.setColumnClasses = function () { $table = d(a.table); for (var c in a.columns) { var g = a.columns[c]; if (null !== g.className) { var b = "", n = !0; d.each(g.matches, function (a, c) { n || (b += ", "); b += "> tbody > tr:not(." + e.detail + ") > td:nth-child(" + (parseInt(c, 10) + 1) + ")"; n = !1 }); $table.find(b).not("." + e.detailCell).addClass(g.className) } } }; a.bindToggleSelectors = function () { var c = d(a.table); a.hasAnyBreakpointColumn() && (c.find(k.toggleSelector).unbind(l.toggleRow).bind(l.toggleRow, function (c) { c = d(this).is("tr") ? d(this) : d(this).parents("tr:first"); a.toggleDetail(c) }), c.find(k.toggleSelector).unbind("click.footable").bind("click.footable", function (a) { c.is(".breakpoint") && d(a.target).is("td,." + e.toggle) && d(this).trigger(l.toggleRow) })) }; a.parse = function (a, g) { return (k.parsers[g.type] || k.parsers.alpha)(a) }; a.getColumnData = function (c) { var g = d(c), b = g.data("hide"), n = g.index(), b = jQuery.map((b || "").split(","), function (a) { return jQuery.trim(a) }), n = { index: n, hide: {}, type: g.data("type") || "alpha", name: g.data("name") || d.trim(g.text()), ignore: g.data("ignore") || !1, toggle: g.data("toggle") || !1, className: g.data("class") || null, matches: [], names: {}, group: g.data("group") || null, groupName: null }; if (null !== n.group) { var e = d(a.table).find('> thead > tr.footable-group-row > th[data-group="' + n.group + '"], > thead > tr.footable-group-row > td[data-group="' + n.group + '"]').first(); n.groupName = a.parse(e, { type: "alpha" }) } e = parseInt(g.prev().attr("colspan") || 0, 10); q += 1 < e ? e - 1 : 0; var e = parseInt(g.attr("colspan") || 0, 10), h = n.index + q; if (1 < e) for (var m = g.data("names"), m = (m || "").split(","), f = 0; f < e; f++) n.matches.push(f + h), f < m.length && (n.names[f + h] = m[f]); else n.matches.push(h); n.hide["default"] = "all" === g.data("hide") || 0 <= d.inArray("default", b); var e = !1, l; for (l in k.breakpoints) n.hide[l] = "all" === g.data("hide") || 0 <= d.inArray(l, b), e = e || n.hide[l]; n.hasBreakpoint = e; return a.raise(p.columnData, { column: { data: n, th: c } }).column.data }; a.getViewportWidth = function () { return window.innerWidth || (document.body ? document.body.offsetWidth : 0) }; a.calculateWidth = function (a, g) { if (jQuery.isFunction(k.calculateWidthOverride)) return k.calculateWidthOverride(a, g); g.viewportWidth < g.width && (g.width = g.viewportWidth); g.parentWidth < g.width && (g.width = g.parentWidth); return g }; a.hasBreakpointColumn = function (c) { for (var g in a.columns) if (a.columns[g].hide[c] && !a.columns[g].ignore) return !0; return !1 }; a.hasAnyBreakpointColumn = function () { for (var c in a.columns) if (a.columns[c].hasBreakpoint) return !0; return !1 }; a.resize = function () { var c = d(a.table); if (c.is(":visible") && a.hasAnyBreakpointColumn()) { var g = { width: c.width(), viewportWidth: a.getViewportWidth(), parentWidth: c.parent().width() }, g = a.calculateWidth(c, g), b = c.data("footable_info"); c.data("footable_info", g); a.raise(p.resizing, { old: b, info: g }); if (!b || b && b.width && b.width !== g.width) { for (var e = null, h, f = 0; f < a.breakpoints.length; f++) if ((h = a.breakpoints[f]) && h.width && g.width <= h.width) { e = h; break } e = null === e ? "default" : e.name; h = a.hasBreakpointColumn(e); f = c.data("breakpoint"); c.data("breakpoint", e).removeClass("default breakpoint").removeClass(a.breakpointNames).addClass(e + (h ? " breakpoint" : "")); e !== f && (c.trigger(l.redraw), a.raise(p.breakpoint, { breakpoint: e, info: g })) } a.raise(p.resized, { old: b, info: g }) } }; a.redraw = function () { a.addRowToggle(); a.bindToggleSelectors(); a.setColumnClasses(); var c = d(a.table), b = c.data("breakpoint"), h = a.hasBreakpointColumn(b); c.find("> tbody > tr:not(." + e.detail + ")").data("detail_created", !1).end().find("> thead > tr:last-child > th").each(function () { var h = a.columns[d(this).index()], f = "", m = !0; d.each(h.matches, function (a, c) { m || (f += ", "); var b = c + 1; f += "> tbody > tr:not(." + e.detail + ") > td:nth-child(" + b + ")"; f += ", > tfoot > tr:not(." + e.detail + ") > td:nth-child(" + b + ")"; f += ", > colgroup > col:nth-child(" + b + ")"; m = !1 }); var f = f + (', > thead > tr[data-group-row="true"] > th[data-group="' + h.group + '"]'), k = c.find(f).add(this); !1 === h.hide[b] ? k.show() : k.hide(); if (1 === c.find("> thead > tr.footable-group-row").length) { var k = c.find('> thead > tr:last-child > th[data-group="' + h.group + '"]:visible, > thead > tr:last-child > th[data-group="' + h.group + '"]:visible'), h = c.find('> thead > tr.footable-group-row > th[data-group="' + h.group + '"], > thead > tr.footable-group-row > td[data-group="' + h.group + '"]'), l = 0; d.each(k, function () { l += parseInt(d(this).attr("colspan") || 1, 10) }); 0 < l ? h.attr("colspan", l).show() : h.hide() } }).end().find("> tbody > tr." + e.detailShow).each(function () { a.createOrUpdateDetailRow(this) }); c.find("> tbody > tr." + e.detailShow + ":visible").each(function () { var a = d(this).next(); a.hasClass(e.detail) && (h ? a.show() : a.hide()) }); c.find("> thead > tr > th.footable-last-column, > tbody > tr > td.footable-last-column").removeClass("footable-last-column"); c.find("> thead > tr > th.footable-first-column, > tbody > tr > td.footable-first-column").removeClass("footable-first-column"); c.find("> thead > tr, > tbody > tr").find("> th:visible:last, > td:visible:last").addClass("footable-last-column").end().find("> th:visible:first, > td:visible:first").addClass("footable-first-column"); a.raise(p.redrawn) }; a.toggleDetail = function (c) { c = c.jquery ? c : d(c); var b = c.next(); c.hasClass(e.detailShow) ? (c.removeClass(e.detailShow), b.hasClass(e.detail) && b.hide(), a.raise(p.rowCollapsed, { row: c[0] })) : (a.createOrUpdateDetailRow(c[0]), c.addClass(e.detailShow).next().show(), a.raise(p.rowExpanded, { row: c[0] })) }; a.removeRow = function (c) { c = c.jquery ? c : d(c); c.hasClass(e.detail) && (c = c.prev()); var b = c.next(); !0 === c.data("detail_created") && b.remove(); c.remove(); a.raise(p.rowRemoved) }; a.appendRow = function (c) { c = c.jquery ? c : d(c); d(a.table).find("tbody").append(c); a.redraw() }; a.getColumnFromTdIndex = function (c) { var b = null, e; for (e in a.columns) if (0 <= d.inArray(c, a.columns[e].matches)) { b = a.columns[e]; break } return b }; a.createOrUpdateDetailRow = function (b) { b = d(b); var g = b.next(), h, f = []; if (!0 === b.data("detail_created")) return !0; if (b.is(":hidden")) return !1; a.raise(p.rowDetailUpdating, { row: b, detail: g }); b.find("> td:hidden").each(function () { var b = d(this).index(), c = a.getColumnFromTdIndex(b), e = c.name; if (!0 === c.ignore) return !0; b in c.names && (e = c.names[b]); f.push({ name: e, value: a.parse(this, c), display: d.trim(d(this).html()), group: c.group, groupName: c.groupName }); return !0 }); if (0 === f.length) return !1; h = b.find("> td:visible").length; var m = g.hasClass(e.detail); m || (g = d('<tr class="' + e.detail + '"><td class="' + e.detailCell + '"><div class="' + e.detailInner + '"></div></td></tr>'), b.after(g)); g.find("> td:first").attr("colspan", h); h = g.find("." + e.detailInner).empty(); k.createDetail(h, f, k.createGroupedDetail, k.detailSeparator, e); b.data("detail_created", !0); a.raise(p.rowDetailUpdated, { row: b, detail: g }); return !m }; a.raise = function (b, e) { !0 === a.options.debug && d.isFunction(a.options.log) && a.options.log(b, "event"); e = e || {}; var h = { ft: a }; d.extend(!0, h, e); var f = d.Event(b, h); f.ft || d.extend(!0, f, h); d(a.table).trigger(f); return f }; a.reset = function () { var b = d(a.table); b.removeData("footable_info").data("breakpoint", "").removeClass(e.loading).removeClass(e.loaded); b.find(k.toggleSelector).unbind(l.toggleRow).unbind("click.footable"); b.find("> tbody > tr").removeClass(e.detailShow); b.find("> tbody > tr." + e.detail).remove(); a.raise(p.reset) }; a.init(); return a } f.footable = { options: { delay: 100, breakpoints: { w410: 410, w480: 480, w580: 580, w768: 768, w980: 980 }, parsers: { alpha: function (b) { return d(b).data("value") || d.trim(d(b).text()) }, numeric: function (b) { b = d(b).data("value") || d(b).text().replace(/[^0-9.\-]/g, ""); b = parseFloat(b); isNaN(b) && (b = 0); return b } }, addRowToggle: !0, calculateWidthOverride: null, toggleSelector: " > tbody > tr:not(.footable-row-detail)", columnDataSelector: "> thead > tr:last-child > th, > thead > tr:last-child > td", detailSeparator: ":", toggleHTMLElement: "<span />", createGroupedDetail: function (b) { for (var d = { _none: { name: null, data: [] } }, f = 0; f < b.length; f++) { var a = b[f].group; null !== a ? (a in d || (d[a] = { name: b[f].groupName || b[f].group, data: [] }), d[a].data.push(b[f])) : d._none.data.push(b[f]) } return d }, createDetail: function (b, d, f, a, k) { d = f(d); for (var e in d) if (0 !== d[e].data.length) for ("_none" !== e && b.append('<div class="' + k.detailInnerGroup + '">' + d[e].name + "</div>"), f = 0; f < d[e].data.length; f++) b.append('<div class="' + k.detailInnerRow + '"><div class="' + k.detailInnerName + '">' + d[e].data[f].name + (d[e].data[f].name ? a : "") + '</div><div class="' + k.detailInnerValue + '">' + d[e].data[f].display + "</div></div>") }, classes: { main: "footable", loading: "footable-loading", loaded: "footable-loaded", toggle: "footable-toggle", disabled: "footable-disabled", detail: "footable-row-detail", detailCell: "footable-row-detail-cell", detailInner: "footable-row-detail-inner", detailInnerRow: "footable-row-detail-row", detailInnerGroup: "footable-row-detail-group", detailInnerName: "footable-row-detail-name", detailInnerValue: "footable-row-detail-value", detailShow: "footable-detail-show" }, triggers: { initialize: "footable_initialize", resize: "footable_resize", redraw: "footable_redraw", toggleRow: "footable_toggle_row", expandFirstRow: "footable_expand_first_row", expandAll: "footable_expand_all", collapseAll: "footable_collapse_all" }, events: { alreadyInitialized: "footable_already_initialized", initializing: "footable_initializing", initialized: "footable_initialized", resizing: "footable_resizing", resized: "footable_resized", redrawn: "footable_redrawn", breakpoint: "footable_breakpoint", columnData: "footable_column_data", rowDetailUpdating: "footable_row_detail_updating", rowDetailUpdated: "footable_row_detail_updated", rowCollapsed: "footable_row_collapsed", rowExpanded: "footable_row_expanded", rowRemoved: "footable_row_removed", reset: "footable_reset" }, debug: !1, log: null }, version: { major: 0, minor: 5, toString: function () { return f.footable.version.major + "." + f.footable.version.minor }, parse: function (b) { version = /(\d+)\.?(\d+)?\.?(\d+)?/.exec(b); return { major: parseInt(version[1], 10) || 0, minor: parseInt(version[2], 10) || 0, patch: parseInt(version[3], 10) || 0 } } }, plugins: { _validate: function (b) { if (!d.isFunction(b)) return !0 === f.footable.options.debug && console.error('Validation failed, expected type "function", received type "{0}".', typeof b), !1; b = new b; if ("string" !== typeof b.name) return !0 === f.footable.options.debug && console.error('Validation failed, plugin does not implement a string property called "name".', b), !1; if (!d.isFunction(b.init)) return !0 === f.footable.options.debug && console.error('Validation failed, plugin "' + b.name + '" does not implement a function called "init".', b), !1; !0 === f.footable.options.debug && console.log('Validation succeeded for plugin "' + b.name + '".', b); return !0 }, registered: [], register: function (b, h) { f.footable.plugins._validate(b) && (f.footable.plugins.registered.push(b), "object" === typeof h && d.extend(!0, f.footable.options, h)) }, load: function (b) { var d = [], m, a; for (a = 0; a < f.footable.plugins.registered.length; a++) try { m = f.footable.plugins.registered[a], d.push(new m(b)) } catch (k) { !0 === f.footable.options.debug && console.error(k) } return d }, init: function (b) { for (var d = 0; d < b.plugins.length; d++) try { b.plugins[d].init(b) } catch (m) { !0 === f.footable.options.debug && console.error(m) } } } }; var t = 0; d.fn.footable = function (b) { b = b || {}; var h = d.extend(!0, {}, f.footable.options, b); return this.each(function () { t++; var b = new u(this, h, t); d(this).data("footable", b) }) } })(jQuery, window);
