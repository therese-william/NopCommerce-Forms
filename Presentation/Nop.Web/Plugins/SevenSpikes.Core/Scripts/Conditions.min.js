/*
* Copyright 2015 Seven Spikes Ltd. All rights reserved. (http://www.nop-templates.com)
* http://www.nop-templates.com/t/licensinginfo
*/

$(document).ready(function () { DisplayExistingConditions(); $("a.add-condition-group").click(function () { AddConditionGroup() }); $(".k-grid-toolbar a.k-grid-delete").livequery("click", function () { var a = $(this).closest(".condition-group-grid"); if (void 0 != a) { var c = $(a).attr("data-conditionGroupId"), a = $(a).attr("id"); void 0 != c && void 0 != a && DeleteConditionGroup(c, a) } }); $("#conditionInfo #ConditionName, #conditionInfo #Active").change(function () { UpdateCondition() }); $("#DefaultConditionValue").change(function () { UpdateDefaultConditionStatement() }) }); $("#editor").livequery(function () { AddViewModel() }); $(window).unload(function () { var a = $.getHiddenValFromDom("#delete-unused-condition-groups-url"), c = { conditionId: $.getHiddenValFromDom("#condition-id") }, b = {}; b.__RequestVerificationToken = addAntiForgeryToken(); $.ajax({ cache: !1, async: !1, type: "POST", data: $.toJSON(c), contentType: "application/json; charset=utf-8", url: a, success: function () { }, headers: b, error: function (a, c, b) { alert("Deleting condition failed.") } }) }); function UpdateCondition() { var a = $.getHiddenValFromDom("#update-condition-url"), c = $.getHiddenValFromDom("#condition-id"), b = $("#conditionInfo *").serialize(), b = b + ("&conditionId=" + c), c = {}; c.__RequestVerificationToken = addAntiForgeryToken(); $.ajax({ cache: !1, async: !1, type: "POST", data: b, url: a, success: function () { }, headers: c, error: function (a, c, b) { alert("Updating condition failed.") } }) } function UpdateDefaultConditionStatement() { var a = $.getHiddenValFromDom("#update-default-condition-group-statement-url"), c = $.getHiddenValFromDom("#condition-id"), b = $("#DefaultConditionValue").find(":selected").val(), d = {}; d.__RequestVerificationToken = addAntiForgeryToken(); $.ajax({ cache: !1, async: !1, type: "POST", data: { conditionId: c, defaultConditionStatementValue: b }, url: a, success: function () { }, headers: d, error: function (a, c, b) { alert("Updating condition default group statement failed.") } }) } function DisplayExistingConditions() { var a = $.parseJSON($.getHiddenValFromDom("#condition-groups")); if (null != a) for (var c = 0; c < a.length; c++) AddConditionGroup(a[c]) } function AddConditionGroup(a) { if (a && 0 != a) AddConditionGroupGridHtml(a); else if (a = CreateConditionGroupAndAddConditionGroupGridHtml(), "" == a) return; addKendoGridForConditionGroup(a) } function addKendoGridForConditionGroup(a) { var c = "condition-group-grid-" + a, b = $.getHiddenValFromDom("#read-condition-group-url"), d = $.getHiddenValFromDom("#update-condition-statement-url"), e = $.getHiddenValFromDom("#destroy-condition-statement-url"), k = $.getHiddenValFromDom("#create-condition-statement-url"), f = {}, h = 0, g = new kendo.data.DataSource({ transport: { read: { url: b, dataType: "json", contentType: "application/json", data: addAntiForgeryToken }, update: { url: d, type: "POST", dataType: "json", contentType: "application/json", data: addAntiForgeryToken }, destroy: { url: e, dataType: "json", contentType: "application/json", data: addAntiForgeryToken }, create: { url: k, type: "POST", dataType: "json", contentType: "application/json", data: addAntiForgeryToken }, parameterMap: function (c, b) { if ("update" === b || "create" === b) return kendo.stringify(f); if ("read" === b) return { conditionGroupId: kendo.stringify(a) }; if ("destroy" === b) return { conditionStatementId: kendo.stringify(h) } } }, batch: !0, pageSize: 30, schema: { model: { id: "Id", fields: { ConditionType: { type: "text" }, ConditionTypeId: { type: "number" }, ConditionPropertyValue: { type: "number" }, ConditionPropertyText: { type: "text" }, OperatorTypeText: { type: "text" }, OperatorTypeValue: { type: "number" }, Text: { type: "text" }, Value: { type: "text" } } } } }); $("#" + c).kendoGrid({ dataSource: g, sortable: !0, editable: { mode: "popup", template: kendo.template($("#popup_editor").html()), window: { animation: !1, width: 400 } }, edit: function (a) { a = a.model; void 0 != a.ConditionType && void 0 != a.ConditionPropertyValue && void 0 != a.OperatorTypeValue && void 0 != a.Value && ($("#condition-type").attr("data-editValue", a.ConditionTypeId), $("#condition-property").attr("data-editValue", a.ConditionPropertyValue), $("#condition-operator").attr("data-editValue", a.OperatorTypeValue), $("#condition-value").attr("data-editValue", a.Value), $("#condition-num-value").attr("data-editValue", a.Value), $("#condition-text-value").attr("data-editValue", a.Value)) }, save: function (c) { f.ConditionGroupId = a; f.ConditionTypeId = $("#condition-type").val(); f.ConditionPropertyValue = $("#condition-property").val(); f.OperatorTypeValue = $("#condition-operator").val(); var b = $("#condition-value").parents(".k-dropdown").css("display"), e = $("#condition-num-value").parents(".k-numerictextbox").css("display"), d = $("#condition-text-value").css("display"); b && "none" == b ? e && "none" == e ? d && "none" == d || (f.Value = $("#condition-text-value").val()) : f.Value = $("#condition-num-value").val() : f.Value = $("#condition-value").val(); if (void 0 != c.model.ConditionType) for (b = g.data(), e = 0; e < b.length; e++) b[e].Id == c.model.Id && (f.Id = c.model.Id, b[e].dirty = !0) }, remove: function (a) { if (void 0 != a.model.Id && "" != a.model.Id) for (var b = g.data(), c = 0; c < b.length; c++) b[c].Id == a.model.Id && (h = a.model.Id, b[c].dirty = !0) }, toolbar: ["create", "destroy"], columns: [{ field: "Id", title: "Id", width: 100, hidden: !0 }, { field: "ConditionType", title: "Type", width: 100 }, { field: "ConditionPropertyText", title: "Property", width: 100 }, { field: "OperatorTypeText", title: "OperatorType", width: 100 }, { field: "Text", title: "Text", width: 250 }, { field: "Value", title: "Value", width: 200, hidden: !0 }, { command: ["edit", "destroy"], title: "&nbsp;", width: "150px" }] }) } function DeleteConditionGroup(a, c) { var b = $.getHiddenValFromDom("#delete-condition-group-url"), d = { conditionGroupId: a }, e = {}; e.__RequestVerificationToken = addAntiForgeryToken(); $.ajax({ cache: !1, type: "POST", data: $.toJSON(d), contentType: "application/json; charset=utf-8", url: b, success: function () { $("#" + c).data("kendoGrid").destroy(); $("#" + c).parent().remove() }, headers: e, error: function (a, c, b) { alert("Deleting condition group failed.") } }) } function AddViewModel() { var a = kendo.observable({ typeSource: GetConditionTypes(), selectedType: null, selectedProperty: null, selectedOperator: null, selectedValue: null }); a.selectedType = SetSelectedConditionType(a.typeSource); a.selectedProperty = SetSelectedConditionProperty(a.selectedType); a.selectedOperator = SetSelectedOperatorType(a.selectedProperty); a.selectedValue = function () { var a = $("#condition-value").parents(".k-dropdown").css("display"), b = $("#condition-num-value").parents(".k-numerictextbox").css("display"), d = $("#condition-text-value").css("display"), e; a && "none" == a ? b && "none" == b ? d && "none" == d || (e = $("#condition-text-value").attr("data-editValue")) : e = $("#condition-num-value").attr("data-editValue") : e = $("#condition-value").attr("data-editValue"); return void 0 != e && "" != e ? e : null }; kendo.bind($("#editor"), a) } function SetSelectedConditionType(a) { var c = $("#condition-type").attr("data-editValue"); if (void 0 != c && "" != c) for (var b = 0; b < a.length; b++) if (a[b].ConditionTypeId == c) return a[b]; return null } function SetSelectedConditionProperty(a) { var c = $("#condition-property").attr("data-editValue"); if (void 0 != c && "" != c) for (var b = 0; b < a.ConditionProperties.length; b++) if (a.ConditionProperties[b].ConditionPropertyValue == c) return a.ConditionProperties[b]; return null } function SetSelectedOperatorType(a) { var c = $("#condition-operator").attr("data-editValue"); if (void 0 != c && "" != c) for (var b = 0; b < a.Operators.length; b++) if (a.Operators[b].OperatorTypeValue == c) return a.Operators[b]; return null } function GetConditionTypes() { var a = $.getHiddenValFromDom("#get-condition-type-url"), c = $.getHiddenValFromDom("#available-condition-types"), b = {}; b.__RequestVerificationToken = addAntiForgeryToken(); var d; $.ajax({ cache: !1, async: !1, type: "POST", contentType: "application/json; charset=utf-8", data: $.toJSON({ availableConditionTypesIds: c }), url: a, success: function (a) { d = a }, headers: b, error: function (a, b, c) { alert("Retrieving condition types failed.") } }); return d } function CreateConditionGroupAndAddConditionGroupGridHtml() { var a = $.getHiddenValFromDom("#create-condition-group-url"), c = $.getHiddenValFromDom("#condition-id"); if ("" == a || "" == c) return 0; var c = { conditionId: c }, b = {}; b.__RequestVerificationToken = addAntiForgeryToken(); var d = ""; $.ajax({ cache: !1, async: !1, type: "POST", headers: b, data: $.toJSON(c), contentType: "application/json; charset=utf-8", url: a, success: function (a) { d = a; AddConditionGroupGridHtml(d) }, error: function (a, b, c) { alert("Creating new condition group failed.") } }); return d } function AddConditionGroupGridHtml(a) { a = '<div><div class="condition-group-grid" id="condition-group-grid-' + a + '" data-conditionGroupId="' + a + '"></div><div class="group-dependancy-text"><p>--OR--</p></div></div>'; $("#condition-groups-wrapper").append(a) };