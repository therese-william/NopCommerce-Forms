@model IList<Nop.Plugin.Widgets.Tickets.Models.DepartmentModel>

@using Nop.Plugin.Widgets.Tickets.Models;



@{
    Layout = "~/Administration/Views/Shared/_AdminLayout.cshtml";
    //page title
    ViewBag.Title = T("Admin.Ticket.Deparments").Text;    
    
}
@Html.AntiForgeryToken()
<div class="section-header">
    <div class="title">
        <img src="@Url.Content("~/Administration/Content/images/ico-catalog.png")" alt="" />
        @T("Admin.Ticket.Deparments")
    </div>
</div>

<div id="department-grid"></div>

<script>
                $(document).ready(function () {
                    $("#department-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("DepartmentList", "TicketDepartment", new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Widgets.Tickets.Controllers" }, { "area", "" } }))",
                                    type: "POST",
                                    dataType: "json",
                                    contentType: "application/json"
                                },
                                create: {
                                    url: "@Html.Raw(Url.Action("DepartmentInsert", "TicketDepartment", new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Widgets.Tickets.Controllers" }, { "area", "" } }))",
                                    type: "POST",
                                    dataType: "json"
                                },
                                update: {
                                    url:"@Html.Raw(Url.Action("DepartmentUpdate", "TicketDepartment", new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Widgets.Tickets.Controllers" }, { "area", "" } }))",
                                    type: "POST",
                                    dataType: "json"
                                },
                                destroy: {
                                    url: "@Html.Raw(Url.Action("DepartmentDelete", "TicketDepartment", new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Widgets.Tickets.Controllers" }, { "area", "" } }))",
                                    type: "POST",
                                    dataType: "json"
                                },
                                parameterMap: function(data, operation) {
                                    if (operation != "read") {
                                        return data;
                                    } else {
                                        //for some reasons only such "Filter" data be parsed
                                        return JSON.stringify(data);
                                    }
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id",
                                    fields: {
                                        Name: { editable: true, type: "string" },
                                        EmailDepartment: { editable: true, type: "string" },
                                        Store: { editable: true, type: "string" },
                                        StoreId: { editable: true, type: "number" },
                                        Email: { editable: true, type: "string" },
                                        EmailAccountId: { editable: true, type: "number" },
                                        Id: { editable: false, type: "number" },
                                        OrderById: { editable: true, type: "number" }
                                    }
                                }
                            },
                            requestEnd: function (e) {
                                if (e.type == "create" || e.type == "update") {
                                    this.read();
                                }
                            },
                            error: function (e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                           
                            serverPaging: false,
                            serverFiltering: false,
                            serverSorting: false
                        },
                        pageable: {
                            refresh: true
                        },
                        sortable: false,
                        toolbar: ["create"],
                        edit: function (e) {
                            if (e.model.isNew()) {
                                if (allEmails.length > 0) {
                                    e.model.EmailAccountId = allEmails[0].Id;
                                }
                                if (allStores.length > 0) {
                                    e.model.StoreId = allStores[0].Id;
                                }
                            }
                        },
                        editable: {
                            confirmation: false,
                            mode: "inline"
                        },
                        
                        scrollable: false,
                        columns: [{
                            field: "Name",
                            title: "@T("Admin.Tickets.Fields.Department.Name")",
                            width: 300,
                        },{
                            field: "EmailDepartment",
                            title: "@T("Admin.Tickets.Fields.Department.EmailDepartment")",
                            width: 300,
                            
                        },{
                            field: "StoreId",
                            title: "@T("Admin.Configuration.Settings.AllSettings.Fields.Store")",
                            width: 150,
                            editor: storeDropDownEditor,
                            template: "#:Store#",
                        },{
                            field: "EmailAccountId",
                            title: "@T("admin.configuration.emailaccounts")",
                            width: 150,
                            editor: emailDropDownEditor,
                            template: "#:Email#",
                        },{
                            field: "OrderById",
                            title: "@T("admin.contentmanagement.polls.fields.displayorder")",
                            width: 30,
                            
                        }, {
                            command: [{
                                name: "edit",
                                text: "@T("Admin.Common.Edit")"
                            }, {
                                name: "destroy",
                                text: "@T("Admin.Common.Delete")"
                            }],
                            width: 200,
                            filterable: false
                        }]
                    });
                });

                //local datasource
                var allStores = [
                    {
                        Id : 0,
                        Name : "@T("Admin.Configuration.Settings.AllSettings.Fields.StoreName.AllStores")"
                    }
                    @{
                        var storeService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Services.Stores.IStoreService>();
                        var allStores = storeService.GetAllStores();
                    }
                    @foreach (var store in allStores)
                    {
                        <text>
                        , {
                            Id: @(store.Id),
                            Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(store.Name)))"
                        }
                        </text>
                    }
                ];

                var allEmails = [
                                @{
                                    var emailService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Services.Messages.IEmailAccountService>();
                                    var allEmails = emailService.GetAllEmailAccounts();
                                }
                                @foreach (var email in allEmails)
                                {
                                    <text>
                                    {
                                    Id: @(email.Id),
                                    Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(email.DisplayName)))"
                                    }
                                </text>
                                <text>,</text>  
                                }
                                ];



                function storeDropDownEditor(container, options) {
                    $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:StoreId"/>')
                        .appendTo(container)
                        .kendoDropDownList({
                            autoBind: false,
                            dataSource: allStores
                        });
                }

                function emailDropDownEditor(container, options) {
                    $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:EmailAccountId"/>')
                        .appendTo(container)
                        .kendoDropDownList({
                            autoBind: false,
                            dataSource: allEmails
                        });
                }
        </script>





@*
    @(Html.Telerik().Grid<Nop.Plugin.Widgets.Tickets.Models.DepartmentModel>()
                    .Name("department-grid")                    
                       .DataKeys(keys =>
                       {
                           keys.Add(x => x.Id);
                       })
                       .DataBinding(dataBinding =>
                       {
                           dataBinding.Ajax()
                               .Select("DepartmentList", "TicketDepartment", new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Widgets.Tickets.Controllers" }, { "area", "" } })
                               .Insert("DepartmentInsert", "TicketDepartment", new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Widgets.Tickets.Controllers" }, { "area", "" } })
                               .Update("DepartmentUpdate", "TicketDepartment", new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Widgets.Tickets.Controllers" }, { "area", "" } })
                               .Delete("DepartmentDelete", "TicketDepartment", new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Widgets.Tickets.Controllers" }, { "area", "" } });
                       })
                       .Columns(columns =>
                       {
                           columns.Bound(x => x.Name)
                               .Width(100);
                           columns.Bound(x => x.EmailDepartment);
                           columns.Bound(x => x.Email).EditorTemplateName("Nop.Plugin.Widgets.Tickets.Views.Admin.Department.EditorTemplates.Email");
                           columns.Bound(x => x.Store).EditorTemplateName("Nop.Plugin.Widgets.Tickets.Views.Admin.Department.EditorTemplates.Store");
                           columns.Bound(x => x.OrderById);
                           columns.Command(commands =>
                           {
                               commands.Edit().Text(T("Admin.Common.Edit").Text);
                               commands.Delete().Text(T("Admin.Common.Delete").Text);
                           })
                           .Width(180);
                       })
                       .ToolBar(commands => commands.Insert())
                       .ClientEvents(events => events.OnEdit("grid_onStoreEdit"))
                       .EnableCustomBinding(true))
    
    <script type="text/javascript">
        function grid_onStoreEdit(e)
        {
            $(e.form).find('#Store').data('tDropDownList').select(function (dataItem) {
                return dataItem.Value == e.dataItem['StoreId'];
            });
            $(e.form).find('#Email').data('tDropDownList').select(function (dataItem) {
                return dataItem.Value == e.dataItem['EmailAccountId'];
            });

        }
        
    </script>
*@