@model CheckoutShippingAddressModel
@using Nop.Web.Models.Checkout;
<div class="checkout-data">
    @if (Model.AllowPickUpInStore)
    {
        <p class="text-center">
            @{
                var pickupInStoreName = T("Checkout.PickUpInStore").Text;
                if (!String.IsNullOrEmpty(Model.PickUpInStoreFee))
                {
                    pickupInStoreName = T("Checkout.PickUpInStoreAndFee", Model.PickUpInStoreFee).Text;
                }
            }
            @Html.CheckBoxFor(x => x.PickUpInStore, new { @onclick = "Shipping.togglePickUpInStore(this)" })
            <label for="@Html.FieldIdFor(model => model.PickUpInStore)">@pickupInStoreName</label>
            <div class="text-center">
                <i>@T("Checkout.PickUpInStore.Description")</i>
            </div>
        </p>
    }
    <div class="marginTop20" id="shipping-addresses-form">
        @Html.Widget("op_checkout_shipping_address_top")
        @if (Model.ExistingAddresses.Count > 0)
        {
            <p class="text-center">
                <label for="shipping-address-select">@T("Checkout.SelectShippingAddressOrEnterNewOne")</label>
            </p>
            <select name="shipping_address_id" id="shipping-address-select" class="form-control"
                    title="" onchange="Shipping.newAddress(!this.value)">
                @foreach (var address in Model.ExistingAddresses)
                {
                    var addressLine = "";
                    addressLine += address.FirstName;
                    addressLine += " " + address.LastName;
                    if (address.StreetAddressEnabled && !String.IsNullOrEmpty(address.Address1))
                    {
                        addressLine += ", " + address.Address1;
                    }
                    if (address.CityEnabled && !String.IsNullOrEmpty(address.City))
                    {
                        addressLine += ", " + address.City;
                    }
                    if (address.StateProvinceEnabled && !String.IsNullOrEmpty(address.StateProvinceName))
                    {
                        addressLine += ", " + address.StateProvinceName;
                    }
                    if (address.ZipPostalCodeEnabled && !String.IsNullOrEmpty(address.ZipPostalCode))
                    {
                        addressLine += " " + address.ZipPostalCode;
                    }
                    if (address.CountryEnabled && !String.IsNullOrWhiteSpace(address.CountryName))
                    {
                        addressLine += ", " + address.CountryName;
                    }
                    //how should we render "FormattedCustomAddressAttributes" here?
                    <option value="@(address.Id)">@(addressLine)</option>
                }
                <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
            </select>
        }
        @Html.Widget("op_checkout_shipping_address_middle")
        <div class="marginTop15" id="shipping-new-address-form">
                @{
                    var validationSummary = Html.ValidationSummary(true);
                }
                @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                {
                    <div class="text-danger">@validationSummary</div>
                }
                @{
                    var dataDictAddress = new ViewDataDictionary();
                    //Merge ModelState (required for validation)
                    dataDictAddress.ModelState.Merge(ViewData.ModelState);
                    dataDictAddress.TemplateInfo.HtmlFieldPrefix = "ShippingNewAddress";
                    @Html.Partial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress)
                }
        </div>
        @Html.Widget("op_checkout_shipping_address_bottom")
    </div>
</div>
