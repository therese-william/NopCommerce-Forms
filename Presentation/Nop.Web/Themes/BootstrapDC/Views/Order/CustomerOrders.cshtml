@model CustomerOrderListModel
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
}
@using Nop.Web.Models.Customer
@using Nop.Web.Models.Order;
@section left
{
    @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.Orders })
}


<div class="page-header page-header-custom">
    <h3>@T("Account.MyAccount") - @T("Account.CustomerOrders")</h3>
</div>
@if (Model.RecurringOrders.Count > 0)
{
    <div class="section recurring-payments">
        <div class="title">
            <strong>@T("Account.CustomerOrders.RecurringOrders")</strong>
        </div>
        @using (Html.BeginForm())
                {
            <table class="table table-bordered table-responsive table-striped">
                <colgroup>
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                </colgroup>
                <thead>
                    <tr>
                        <th>
                            @T("Account.CustomerOrders.RecurringOrders.StartDate")
                        </th>
                        <th>
                            @T("Account.CustomerOrders.RecurringOrders.CycleInfo")
                        </th>
                        <th>
                            @T("Account.CustomerOrders.RecurringOrders.NextPayment")
                        </th>
                        <th>
                            @T("Account.CustomerOrders.RecurringOrders.TotalCycles")
                        </th>
                        <th>
                            @T("Account.CustomerOrders.RecurringOrders.CyclesRemaining")
                        </th>
                        <th>
                            @T("Account.CustomerOrders.RecurringOrders.InitialOrder")
                        </th>
                        <th>
                            @T("Account.CustomerOrders.RecurringOrders.Cancel")
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.RecurringOrders)
                    {
                        <tr>
                            <td>
                                @item.StartDate
                            </td>
                            <td>
                                @item.CycleInfo
                            </td>
                            <td>
                                @item.NextPayment
                            </td>
                            <td>
                                @item.TotalCycles
                            </td>
                            <td>
                                @item.CyclesRemaining
                            </td>
                            <td>
                                <a href="@Url.RouteUrl("OrderDetails", new { orderId = item.InitialOrderId })">@string.Format(T("Account.CustomerOrders.RecurringOrders.ViewInitialOrder").Text, item.InitialOrderId)</a>
                            </td>
                            <td>
                                @if (item.CanCancel)
                                {
                                    <input type="submit" name="cancelRecurringPayment@(item.Id)" value="@T("Account.CustomerOrders.RecurringOrders.Cancel")" class="button-2 cancel-recurring-order-button" />
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    if (Model.CancelRecurringPaymentErrors.Count > 0)
    {
        <div class="text-danger">
            <ul>
                @foreach (var error in Model.CancelRecurringPaymentErrors)
                    {
                    <li>@error</li>
                }
            </ul>
        </div>
    }
}

@if (Model.Orders.Count > 0)
{
    foreach (var order in Model.Orders)
    {
        <div class="page-header marginTop0">
            <h4 class="marginTop0">@T("Account.CustomerOrders.OrderNumber"): @order.Id</h4>
            <a class="btn btn-link pull-right" onclick="setLocation('@Url.RouteUrl("OrderDetails", new { orderId = order.Id })')">
                <i class="glyphicon glyphicon-tasks"></i>  @T("Account.CustomerOrders.OrderDetails")
            </a>
                @if (order.IsReturnRequestAllowed)
                {
                    <a class="btn btn-link pull-right" onclick="setLocation('@Url.RouteUrl("ReturnRequest", new { orderId = order.Id })')">
                        <i class="glyphicon glyphicon-arrow-right colorRed"></i> @T("Account.CustomerOrders.ReturnItems")
                    </a>
                }    
        </div>
        <ul class="list-unstyled marginBottom40">
            <li>@T("Account.CustomerOrders.OrderStatus"): <span class="order-status @order.OrderStatusEnum.ToString().ToLowerInvariant()">@order.OrderStatus</span></li>
            <li>@T("Account.CustomerOrders.OrderDate"): <span class="order-date">@order.CreatedOn.ToString()</span></li>
            <li>@T("Account.CustomerOrders.OrderTotal"): <span class="order-total">@order.OrderTotal</span></li>
        </ul>
    }
}
else
{
    <div class="">
        @T("Account.CustomerOrders.NoOrders")
    </div>
}


