@model NewsletterBoxModel
@using Nop.Web.Models.Newsletter;

<h4>@T("Newsletter.Title")</h4>
<div id="newsletter-subscribe-block">
    <div class="form-group maxWidth250">
        <div class="input-group">
            @Html.TextBoxFor(x => x.NewsletterEmail, new { id = "newsletter-email", @class = "form-control", placeholder = T("Newsletter.Email.Placeholder") })
            <span class="input-group-btn">
                <input type="button" value="@T(Model.AllowToUnsubscribe ? "Newsletter.Options.Send" : "Newsletter.Options.Subscribe")" id="newsletter-subscribe-button" class="btn btn-primary" />
            </span>
        </div>
    </div>
   
    @if (Model.AllowToUnsubscribe)
    {
        <div class="form-group">
            <label for="newsletter_subscribe" class="radio-inline"><input id="newsletter_subscribe" type="radio" name="newsletter_block" value="newsletter_subscribe" checked="checked">@T("Newsletter.Options.Subscribe")</label>
            <label for="newsletter_unsubscribe" class="radio-inline"><input id="newsletter_unsubscribe" type="radio" name="newsletter_block" value="newsletter_unsubscribe">@T("Newsletter.Options.Unsubscribe")</label>
        </div>
    }
    <div class="text-muted">
        <span id="subscribe-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
        @Html.ValidationMessageFor(x => x.NewsletterEmail)
    </div>
</div>
<div class="text-muted" id="newsletter-result-block"></div>
<script type="text/javascript">
        function newsletter_subscribe(subscribe) {
            var email = $("#newsletter-email").val();
            var subscribeProgress = $("#subscribe-loading-progress");
            subscribeProgress.show();
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.RouteUrl("SubscribeNewsletter"))",
                data: { "subscribe": subscribe, "email": email },
                success: function (data) {
                    subscribeProgress.hide();
                    $("#newsletter-result-block").html(data.Result);
                    if (data.Success) {
                        $('#newsletter-subscribe-block').hide();
                        $('#newsletter-result-block').show();
                    } else {
                        $('#newsletter-result-block').fadeIn("slow").delay(2000).fadeOut("slow");
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to subscribe.');
                    subscribeProgress.hide();
                }
            });
        }

        $(document).ready(function () {
            $('#newsletter-subscribe-button').click(function () {
                @if (Model.AllowToUnsubscribe)
                {
                    <text>if ($('#newsletter_subscribe').is(':checked')) {
                    newsletter_subscribe('true');
                } else {
                    newsletter_subscribe('false');
                }</text>
                }
                else
                {
                    <text>newsletter_subscribe('true');</text>
                }
            });
            $("#newsletter-email").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#newsletter-subscribe-button").click();
                    return false;
                }
            });
        });
</script>

