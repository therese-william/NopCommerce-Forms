@model NewsItemModel
@using Nop.Web.Models.News;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
}

<div class="row">
    <div class="col-md-12">
        <h3>@Model.Title</h3>
        <small class="text-muted"><i>@Model.CreatedOn.ToString("D")</i></small>
        @Html.Widget("newsitem_page_before_body", Model.Id)
        <div class="marginTop10">
            @Html.Raw(Model.Full)
        </div>
        @Html.Widget("newsitem_page_before_comments", Model.Id)
    </div>
</div>
<div class="row marginTop20">
    <div class="col-md-12">
        @if (Model.AllowComments)
        {
            <h4 class="text-center">@T("News.Comments.LeaveYourComment")</h4>
            <div class="notifications">
            @{
                var validationSummary = Html.ValidationSummary(true);
            }
            @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
            {
                <div class="text-danger">@validationSummary</div>
            }
            @{
                var result = TempData["nop.news.addcomment.result"] as string;
            }
            @if (!String.IsNullOrEmpty(result))
            {
                <div class="text-success">@result</div>
            }
            </div>
            using (Html.BeginForm())
            {
                <div class="row marginTop10">
                    <div class="form-group">
                        @Html.LabelFor(model => model.AddNewComment.CommentTitle, new { @class = "col-sm-2 control-label" }, ":")
                        <div class="col-md-8">
                            @Html.TextBoxFor(model => model.AddNewComment.CommentTitle, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-4 text-danger">
                            <small class="text-danger">  @Html.ValidationMessageFor(model => model.AddNewComment.CommentTitle)</small>
                        </div>
                    </div>
                </div>
                <div class="row marginTop10">
                    <div class="form-group">
                        @Html.LabelFor(model => model.AddNewComment.CommentText, new { @class = "col-sm-2 control-label" }, ":")
                        <div class="col-md-8">
                            @Html.TextAreaFor(model => model.AddNewComment.CommentText, new { @class = "form-control", rows = "10" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-4 text-danger">
                            <small class="text-danger">@Html.ValidationMessageFor(model => model.AddNewComment.CommentText)</small>
                        </div>
                    </div>
                </div>
                if (Model.AddNewComment.DisplayCaptcha)
                {
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-4">
                            @Html.Raw(Html.GenerateCaptcha())
                        </div>
                     </div>
                }
                <div class="form-group">
                    <div class="text-center marginBottom30">
                        <input type="submit" name="add-comment" class="btn btn-primary" value="@T("News.Comments.SubmitButton")" />
                    </div>
                </div>
            }
            if (Model.Comments.Count > 0)
            {
                <div class="comment-list">
                    <h4 class="text-center">@T("News.Comments")</h4>
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="row borderTop marginTop10">
                            <div class="col-sm-2">
                                <div class="user-info ">
                                    @if (comment.AllowViewingProfiles)
                                    {
                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="username">@(comment.CustomerName)</a>
                                    }
                                    else
                                    {
                                        <span class="username">@(comment.CustomerName)</span>
                                    }
                                    @if (!String.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                    {
                                        <div class="avatar">
                                            @if (comment.AllowViewingProfiles)
                                            {
                                                <a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="avatar-img-link">
                                                    <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" title="avatar" alt="avatar" />
                                                </a>
                                            }
                                            else
                                            {
                                                <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" title="avatar" alt="avatar" />
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-sm-8">
                                <div class="">
                                    <small>@T("News.Comments.CreatedOn"):</small>
                                    <small class="text-muted">@comment.CreatedOn.ToString("g")</small>
                                </div>
                                <h4 class="">@comment.CommentTitle</h4>
                                 <p class="text-muted">@Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))</p>
                            </div>
                            @Html.Widget("newsitem_page_inside_comment", comment.Id)
                        </div>
                    }
                </div>
            }
        }
        @Html.Widget("newsitem_page_after_comments", Model.Id)
    </div>
</div>

